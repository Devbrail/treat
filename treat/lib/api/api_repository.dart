import 'dart:async';import 'package:dartz/dartz.dart';import 'package:get/get_connect/http/src/multipart/form_data.dart';import 'package:get/get_utils/src/extensions/dynamic_extensions.dart';import 'package:treat/models/models.dart';import 'package:treat/models/response/addresses.dart';import 'package:treat/models/response/everyday_store.detail.dart';import 'package:treat/models/response/favourite_response.dart';import 'package:treat/models/response/intial_token_response.dart';import 'package:treat/models/response/profile_response.dart';import 'package:treat/models/response/search_response.dart';import 'package:treat/models/response/store_dasboard.dart';import 'package:treat/models/response/store_details.dart';import 'api.dart';class ApiRepository {  ApiRepository({required this.apiProvider});  final ApiProvider apiProvider;  Future<IntialTokenResponse?> initialtoken() async {    final res = await apiProvider.initialtoken(ApiConstants.initialtoken);    if (res.statusCode == 200) {      return IntialTokenResponse.fromJson(res.body);    }  }  Future<LoginResponse?> authToken(String initialToken) async {    final res =        await apiProvider.authToken('${ApiConstants.skiplogin}/$initialToken');    if (res.statusCode == 200) {      return LoginResponse.fromJson(res.body);    }  }  Future<StoreDashboardResponse?> loadStores(      {required String lat,      required String lng,      required String storeType}) async {    final res = await apiProvider        .loadStores('${ApiConstants.stores}/$storeType/$lat/$lng');    if (res.statusCode == 200) {      return StoreDashboardResponse.fromJson(res.body);    }  }  Future<FavouriteResponse?> favoriteStoreDetails({    required String lat,    required String lng,  }) async {    final res = await apiProvider        .favoriteStoreDetails('${ApiConstants.favoritestoredetails}/$lat/$lng');    if (res.statusCode == 200) {      return FavouriteResponse.fromJson(res.body['respData']);    }  }  Future<Either<String, Map>?> sendOtpPhone({required Map data}) async {    final res = await apiProvider.sentOtpPhone(ApiConstants.phone, data);    if (res.statusCode == 200)      return Right(res.body);    else      return Left(res.body);  }  Future<Either<String, Map>?> sendOtpEmail({required Map data}) async {    final res = await apiProvider.sentOtpEmail(ApiConstants.email, data);    if (res.statusCode == 200) {      return Right(res.body);    } else      return Left(res.body);  }  Future<Either<String, Map>?> verifyOTP({required Map data}) async {    final res = await apiProvider.sentOtpEmail(ApiConstants.verify, data);    if (res.statusCode == 200) {      return Right(res.body);    } else      return Left(res.body);  }  Future<Either<String, Map>?> resendOtp({required Map data}) async {    final res = await apiProvider.resentOTP(ApiConstants.resendotp, data);    if (res.statusCode == 200) {      return Right(res.body);    } else      return Left(res.body);  }  Future<Either<int, Addresses>?> getconsumeraddresses() async {    final res = await apiProvider        .getconsumeraddresses(ApiConstants.getconsumeraddresses);    if (res.statusCode == 200) {      if (res.body['success'])        return Right(Addresses.fromJson(res.body['respData']));      else        return Left(0);    }    return Left(-1);  }  Future<Either<int, SearchResult>?> searchStores(Map body) async {    final res = await apiProvider.searchStores(ApiConstants.searchStores, body);    if (res.statusCode == 200) {      if (res.body['success'])        return Right(SearchResult.fromJson(res.body['respData']));      else        return Left(0);    }    return Left(-1);  }  Future<List> searchSuggestions(String query) async {    final res = await apiProvider.searchSuggestions(        '${ApiConstants.searchSuggestions}?searchtext=$query');    if (res.statusCode == 200) if (res.body['success'])      return res.body['respData']['searchSuggestions'];    else      return [];    return [];  }  Future<dynamic> addRemoveCart(String query) async {    final res =        await apiProvider.addRemoveCart(ApiConstants.addRemoveCart + query);    if (res.statusCode == 200 && res.body["success"])      return 0;    else      return res.body['message'];    return -1;  }  Future<dynamic> uploadAsset(FormData form) async {    final res = await apiProvider.uploadAsset(ApiConstants.uploadAsset, form);    if (res.statusCode == 200) {      return res.body['respData']['assetId'];    }    return -1;  }  Future<Either<int, List<dynamic>>> storeAmenities() async {    final res = await apiProvider.storeAmenities(ApiConstants.storeAmenities);    if (res.statusCode == 200) {      if (res.body['success'])        return Right(res.body['respData']['storeAmnetyDetails']);      else        return Left(0);    }    return Left(-1);  }  Future<Either<bool, bool>?> makeDefaultAddress(int addressID) async {    final res = await apiProvider.getconsumeraddresses(        ApiConstants.makeDefaultAddress + '?DefaultAddressId=$addressID');    if (res.statusCode == 200) return Right(true);    return Left(false);  }  Future<Either<String, Map>?> toggleFavourite({required Map data}) async {    final res =        await apiProvider.toggleFavourite(ApiConstants.toggleFavourite, data);    if (res.statusCode == 200)      return Right(res.body);    else      return Left(res.body ?? '');  }  Future<Either<String, EveryDayStore>?> loadEveryDayStoreDetail(      String storeID) async {    final res = await apiProvider        .getStoreDetails('${ApiConstants.storedetails}/$storeID');    if (res.statusCode == 200)      return Right(EveryDayStore.fromJson(res.body['respData']));    else      return Left(res.statusCode.toString() +          "  " +          res.status.isUnauthorized.toString());  }  Future<Either<String, StoreDetails>?> getStoreDetails(String storeID) async {    final res = await apiProvider        .getStoreDetails('${ApiConstants.storedetails}/$storeID');    if (res.statusCode == 200)      return Right(StoreDetails.fromJson(res.body['respData']));    else      return Left(res.statusCode.toString() +          "  " +          res.status.isUnauthorized.toString());  }  Future<Either<String, Map>?> completeProfile({required Map data}) async {    final res = await apiProvider.completeProfile(ApiConstants.capture, data);    if (res.statusCode == 200)      return Right(res.body);    else      return Left(res.body);  }  Future<dynamic> getProfileDetails() async {    final res =        await apiProvider.getProfileDetails(ApiConstants.getProfileDetails);    if (res.statusCode == 200)      return ProfileDetails.fromJson(res.body['respData']['basicDetails']);    return -1;  }  Future<int> editProfileDetails(Map data) async {    final res = await apiProvider.editProfileDetails(        ApiConstants.editProfileDetails, data);    if (res.statusCode == 200) {      return 0;    }    return -1;  }  Future<dynamic> getCouponSummary(int couponID) async {    final res = await apiProvider        .getCouponSummary('${ApiConstants.couponSummary}/$couponID');    if (res.statusCode == 200 && res.body['success']) {      return res.body['respData'];    }    return -1;  }  Future<dynamic> redeemCoupon(Map data) async {    final res =        await apiProvider.redeemCoupon('${ApiConstants.redeemCoupon}', data);    if (res.statusCode == 200 && res.body['success']) {      return res.body['respData'];    }    return -1;  }  Future<dynamic> postRating(Map data) async {    final res =        await apiProvider.postRating('${ApiConstants.postRating}', data);    if (res.statusCode == 200 && res.body['success']) {      return res.body['respData'];    }    return -1;  }}